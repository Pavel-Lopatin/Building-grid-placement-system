//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_project/Modules/BuildingSystem/InputMaps/BuldingSystemControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace BuildingSystem
{
    public partial class @BuldingSystemControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @BuldingSystemControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""BuldingSystemControls"",
    ""maps"": [
        {
            ""name"": ""Building Map"",
            ""id"": ""c57d4dda-9715-47d6-a8dc-c56927ec9641"",
            ""actions"": [
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""9b0a5157-14a4-4337-905a-9dceb2f0c2f9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Left Mouse Press"",
                    ""type"": ""Button"",
                    ""id"": ""5f53db1b-8a3e-4336-a298-4765a31eb012"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape Button Press"",
                    ""type"": ""Button"",
                    ""id"": ""830bd64e-5642-4559-b6fe-ca85226b75f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""199bd021-c638-4fb7-ac27-2e10d3d0f04d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e8b2efc-d336-4193-808a-3187baa234e6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Mouse Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22d71484-701c-462e-aeba-01f1b15b747b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape Button Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Building Map
            m_BuildingMap = asset.FindActionMap("Building Map", throwIfNotFound: true);
            m_BuildingMap_CursorPosition = m_BuildingMap.FindAction("CursorPosition", throwIfNotFound: true);
            m_BuildingMap_LeftMousePress = m_BuildingMap.FindAction("Left Mouse Press", throwIfNotFound: true);
            m_BuildingMap_EscapeButtonPress = m_BuildingMap.FindAction("Escape Button Press", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Building Map
        private readonly InputActionMap m_BuildingMap;
        private List<IBuildingMapActions> m_BuildingMapActionsCallbackInterfaces = new List<IBuildingMapActions>();
        private readonly InputAction m_BuildingMap_CursorPosition;
        private readonly InputAction m_BuildingMap_LeftMousePress;
        private readonly InputAction m_BuildingMap_EscapeButtonPress;
        public struct BuildingMapActions
        {
            private @BuldingSystemControls m_Wrapper;
            public BuildingMapActions(@BuldingSystemControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @CursorPosition => m_Wrapper.m_BuildingMap_CursorPosition;
            public InputAction @LeftMousePress => m_Wrapper.m_BuildingMap_LeftMousePress;
            public InputAction @EscapeButtonPress => m_Wrapper.m_BuildingMap_EscapeButtonPress;
            public InputActionMap Get() { return m_Wrapper.m_BuildingMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BuildingMapActions set) { return set.Get(); }
            public void AddCallbacks(IBuildingMapActions instance)
            {
                if (instance == null || m_Wrapper.m_BuildingMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BuildingMapActionsCallbackInterfaces.Add(instance);
                @CursorPosition.started += instance.OnCursorPosition;
                @CursorPosition.performed += instance.OnCursorPosition;
                @CursorPosition.canceled += instance.OnCursorPosition;
                @LeftMousePress.started += instance.OnLeftMousePress;
                @LeftMousePress.performed += instance.OnLeftMousePress;
                @LeftMousePress.canceled += instance.OnLeftMousePress;
                @EscapeButtonPress.started += instance.OnEscapeButtonPress;
                @EscapeButtonPress.performed += instance.OnEscapeButtonPress;
                @EscapeButtonPress.canceled += instance.OnEscapeButtonPress;
            }

            private void UnregisterCallbacks(IBuildingMapActions instance)
            {
                @CursorPosition.started -= instance.OnCursorPosition;
                @CursorPosition.performed -= instance.OnCursorPosition;
                @CursorPosition.canceled -= instance.OnCursorPosition;
                @LeftMousePress.started -= instance.OnLeftMousePress;
                @LeftMousePress.performed -= instance.OnLeftMousePress;
                @LeftMousePress.canceled -= instance.OnLeftMousePress;
                @EscapeButtonPress.started -= instance.OnEscapeButtonPress;
                @EscapeButtonPress.performed -= instance.OnEscapeButtonPress;
                @EscapeButtonPress.canceled -= instance.OnEscapeButtonPress;
            }

            public void RemoveCallbacks(IBuildingMapActions instance)
            {
                if (m_Wrapper.m_BuildingMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBuildingMapActions instance)
            {
                foreach (var item in m_Wrapper.m_BuildingMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BuildingMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BuildingMapActions @BuildingMap => new BuildingMapActions(this);
        public interface IBuildingMapActions
        {
            void OnCursorPosition(InputAction.CallbackContext context);
            void OnLeftMousePress(InputAction.CallbackContext context);
            void OnEscapeButtonPress(InputAction.CallbackContext context);
        }
    }
}
